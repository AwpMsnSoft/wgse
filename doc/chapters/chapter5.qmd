# 项目编码规范

::: {#c5_note1 .callout-note}
本章节所述规范是为了保证项目代码的一致性，仅供为项目贡献代码的开发者参考。非开发者可以自行略过本章节内容。
:::

## 文档编写规范

本项目所有文档的编写规范均参考 [如何写好技术文档 - 排版格式和规范(一)\_技术文档编写标准规范-CSDN博客](https://blog.csdn.net/q1051275011/article/details/135536279)。

除此之外，本项目所有文档均应使用如下术语。

### 规范效力分级

| 效力等级 | 用词 | 定义说明 |
|----------------------|-------------------------|-------------------------|
| 必须遵守 | **要求** | 所有贡献代码者须无条件遵守的标准 |
| 尽量遵守 | **推荐** | 为维护一致性和可修改性而推荐的标准，可以视具体情况适当调整 |
| 供参考 | **可以** | 项目中得到的最佳实践或技巧，供参考和借鉴 |
| 不建议 | **不宜** | 可能背离最佳实践的操作，可以出现但不建议 |
| 尽量避免 | **避免** | 为保证项目质量和可维护性而应尽量避免的操作， 允许在切实需要的场景下使用 |
| 必须避免 | **禁止** | 所有贡献代码者须无条件不可违返的标准 |

### 文档结构称谓

| 文档结构 | 用词 | 定义说明                                |
|----------|------|-----------------------------------------|
| 一级     | 页面 | 一级标题下属所有内容                    |
| 二级     | 章节 | 二级标题下属所有内容                    |
| 三级     | 小节 | 三级标题下属所有内容                    |
| 四级     | 条款 | 规范章节各小节下属无序/有序序列标记内容 |
| 四级     | 内容 | 各级别下属无标题且非条款的内容          |

### 文档编辑注意事项

-   **可以**为每条条款添加一个示例

-   **要求**条款描述与示例保持严格语义等价

-   **要求**为版本强相关性的内容/条款添加版本号标记

    > 例如： **可以**为每条条款添加一个示例 ~\[v0.1.0-dev\]~

-   **要求**安全相关约束条款采用否定优先原则，使用**禁止**替代**要求**不允许

    > 例如： **禁止**无任何实质性内容和含义的条款

-   **要求**所有术语在第一次出现时必须后置由中文小括号包裹的说明

## PEG 语法描述文件规范

### 文件结构

-   **要求**所有 `pest` 文件有且只有一个元数据区块

-   **要求**所有 `pest` 文件有且只有一个语法树根节点（实际代码的解析入口点 `Rules`）

-   **推荐**所有 `pest` 文件有静默规则区块

-   **要求**所有 `pest` 文件有至少一个语法树节点 （在实际代码中表示一个完整语法含义的 `Rules`）

### 各级文件结构内容

**文件元数据部分**

-   **要求**所有 `pest` 文件以文件元数据头部作为开头。

-   **要求**元数据头部包含如下字段

    -   `author` 作者信息，包含作者名和联系邮箱

    -   `version` 版本信息，用于版本管理

    -   `license` 许可证信息

-   **推荐**元数据头部包含如下字段

    -   `since` 最近修改日期

    -   `maintainer` 最近维护者

    -   `see` 文档的项目链接

-   **推荐**所有 `pest` 文件使用 MIT 许可证或/和 Apache 2.0 许可证

**静默规则部分**

-   **要求**静默区块内容是 `pest` 的静默规则

    > 例如：
    >
    > ``` pest
    > CJK_SAMPLE_UNICODE_POINT = _{}
    > ```

-   **要求**静默规则区块置于各区块之首

-   **要求**静默规则使用 UPPER_SNAKE_CASE 命名

-   **推荐**静默规则区块按以下顺序组织内容

    -   需要单列或补充的 Unicode 码点

    -   `pest` 内置的 `WHITESPACE` 规则

    -   `pest` 内置的 `COMMENT` 规则

    -   该语法描述文件定义的语法关键字

-   **推荐** Unicode 码点相关静默规则命名以与其关联的语言开头

-   **推荐**语法描述文件定义的语法关键字命名以与其关联的脚本引擎名开头

**其他规则部分**

-   **要求**语法树节点以结构化标记 `I` 开头

-   **要求**语法树节点使用 UpperCamalCase 命名

-   **推荐**语法树节点下属子语法树节点的命名采用层级式命名

    > 例如：
    >
    > ``` pest
    > IMessage        = { IMessageNamed | IMessageUnnamed }
    > IMessageNamed   = { /* some contents here */ }
    > IMessageUnnamed = { /* some contents here */ }
    > ```

-   **要求**语法树节点下属原子规则 （构成一个 `Rules` 的所有有独立语法含义的 `Token`）是 `pest` 的原子规则

    > 例如：
    >
    > ``` pest
    > MessageSequenceNo = @{ ASCII_DIGIT+ }
    > ```

-   **要求**语法树节点下属原子规则使用 UpperCamalCase 命名

-   **禁止**语法树节点下属原子规则以结构化标记 `I` 开头

-   **推荐**将语法树节点与语法树节点下属原子规则在代码中组织在相邻位置

-   **推荐**语法树节点下属原子规则的命名以语法树节点命名开头

    > 例如：
    >
    > ``` pest
    > /// .message rule
    > IMessage = { /* some contents here */ }
    >
    > /// .message atoms
    > MessageSequenceNo = @{ ASCII_DIGIT+ }
    > ```

-   **推荐**语法树下属原子规则的命名直接描述其数据内容

-   **可以**将所有的语法树节点归纳为一个静默的虚语法树节点

-   **可以**将语法树根节点命名为语法文件名

-   **可以**将语法树根节点定义为 `SOI + 虚语法树节点 + EOI` 的形式

-   **可以**将虚语法树节点和语法树根节点在代码中组织在相邻位置

    > 例如：
    >
    > ``` pest
    > /// main rule for Musica
    > IMusica = _{ /* all rules */ }
    > Musica  = { SOI ~ IMusica* ~ EOI }
    > ```

-   **推荐**补充 Unicode 码点时使用注释标注该码点名称及所属平面

    > 例如：
    >
    > ``` pest
    > CJ_LEFT_CORNER_BRACKET = _{
    >     "\u{300C}" // Left Corner Bracket, CJK Symbols and Punctuation
    >   | "\u{FF62}" // Halfwidth Left Corner Bracket, Halfwidth and Fullwidth Forms
    > }
    > ```

**注释规范**

-   **要求**元数据头部使用 `//!`

-   **要求**其他单行注释使用 `///`

-   **要求**其他多行注释使用 `/* */`

## git 规范

### git 提交规范

**工作流程**

-   **要求**本项目使用 `Git Flow` 工作流程

-   **要求**本项目的 `Git Flow` 分支使用如下命名

    -   项目主分支 `master`

    -   开发分支 `develop`

    -   特性分支 `feature/${subprojecct}/${task_id}/${task_name}`

        > 例子：
        >
        > ``` text
        > feature/doc/1/add_project_documentation_template
        > ```

    -   发布分支 `release`

    -   修复分支 `bugfix`

    -   热修复分支 `hotfix`

-   **禁止**使用除上述分支以外的所有分支

-   **推荐**使用 [git-flow](https://github.com/nvie/gitflow) 工具

-   **要求**发布版本的版本号 `tag` 遵照如下格式

    -   `v` 作为版本号开头

    -   `x.y.z` 格式的版本号

        -   其中 `x` 为主版本号，初始为 `0`

        -   其中 `y` 为次版本号，初始为 `1`

        -   其中 `z` 为修改版本号，初始为 `0`

    -   如下列表中的版本号后缀

        -   `-dev` 开发版本，**可以**功能未完全实现，**可以**功能缺失、不可用或有缺陷，**可以**按需求选是否发布

        -   `-alpha` 内部测试版本，**要求**功能基本实现，**可以**部分功能缺失、不可用或有缺陷，**可以**存在部分未知问题

        -   `-beta` 公开测试版本，**要求**功能全部实现，**可以**部分功能存在轻微错误，**可以**存在少量未完全修复的已知问题

        -   `-rc` 发布候选版本，**要求**可作为正式发布版本，**可以**在此版本上进行维护性修改，**可以**按需求选是否发布

        -   无后缀 正式发布版本，**禁止**除修复和热修复以外的所有更改

        -   `-stable` 稳定版本，**要求**源自正式发布三个月后无任何修改的版本，**可以**按需求选是否发布

-   **禁止**在版本号中使用除上一条款所述内容之外的内容

    > 例如：日期版本号

-   **要求**版本号递增遵循如下规则

    -   主版本号在**架构变化、模块增加、整体重构**等场景时自增。**要求**主版本之间互不兼容

    -   次版本号在**功能增加、模块重构**等场景时自增。**要求**次版本号向下兼容

    -   修改版本号在**功能重构、非功能修改**等场景时自增。**要求**修改版本号向下兼容

### github issue 规范

本小节内容参考[issue 示例](https://)。